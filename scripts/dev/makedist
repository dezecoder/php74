#!/bin/sh
#
# PHP distribution generator for creating PHP release packages.
#
# Written by Stig Bakken <ssb@guardian.no> 1997-05-28.
# Adapted to Git by Stanislav Malyshev <stas@php.net>.

# Go to project root directory.
cd $(CDPATH= cd -- "$(dirname -- "$0")/../../" && pwd -P)

# Process options and arguments.
while :; do
  case $1 in
    -h|--help)
      cat << HELP
PHP distribution generator for creating PHP release packages.

Creates a PHP release packages (tar.gz, tar.bz2, tar.xz) from the php-src Git
repository. The snapshot archive also includes generated configure script,
configuration headers, PHP parsers, PHP lexers, and similar generated files to
simplify the installation on *nix systems.

SYNOPSIS:
  makedist [options] <tree-ish>

OPTIONS:
  -h, --help        Display this help.
  --remote=<repo>   Instead of using a local repository, retrieve a tar archive
                    from a remote repository.
  <tree-ish>        The Git tree or Git commit to produce an archive for. This
                    script needs a consistent tagging of releases. Each release
                    of a package should have a tag of the form:
                      php-X.Y.Z[alpha|beta|RC]

                    or branch:
                       PHP-X.Y[.Z]

                    Where:
                      - X is major version number
                      - Y is minor version number
                      - Z is patch version number
                      - last part of tag is optional and is one of RC, alpha, or
                        beta and belonging number.

EXAMPLES:

  Creates nightly snapshot of the master branch:
    makedist

  Creates release packages:
    makedist php-7.4.0

  Creates the first release candidate packages:
    makedist php-7.4.0RC1

  Creates release packages from a remote Git repository:
    makedist --remote=git@git.php.net:php-src.git php-7.4.0RC1

  Creates the nightly snapshot of the PHP-7.4 branch:
    makedist PHP-7.4
HELP
      exit
      ;;
    --remote)
      # Check for an option argument.
      if test -n "$2"; then
        remote=$2
        shift
      else
        echo "makedist: '--remote' requires a non-empty option argument." >&2
        exit 1
      fi
      ;;
    --remote=?*)
      # Set everything after the "=".
      remote=${1#*=}
      ;;
    --remote=)
      # When passing empty "--remote=" option.
      echo "makedist: '--remote' requires a non-empty option argument." >&2
      exit 1
      ;;
    -?*)
      echo "WARN: Unknown option (ignored): '$1'" >&2
      ;;
    *)
      # When no more options, check for an argument and break out of the loop.
      if test -n "$1"; then
        treeish="$1"
        prefix="$treeish"
      elif test -z "$treeish"; then
        treeish="master"
        prefix="php-master-"$(date +"%Y-%m-%d-%H-%M")
      fi
      break
  esac

  shift
done

# Verify the directory for package files doesn't already exist.
if test -d "$prefix"; then
  echo "makedist: The directory $prefix" >&2
  echo "          already exists. Rename or remove it and run makedist again." >&2
  exit 1
fi

if test -n "$remote"; then
  remote="--remote=$remote"
else
  echo "makedist: Verifying that tree-ish $treeish exists in Git repository..."
  git rev-parse --verify $treeish
  exit_code=$?
  if test "$exit_code" != "0"; then
    echo "          $treeish is not found in the Git repository" >&2
    exit $exit_code
  else
    echo "          OK"
  fi
fi

# Export PHP.
echo "makedist: exporting '$treeish' from '$git'..."
git archive --format=tar $remote --prefix=$prefix/ $treeish | tar xvf - || exit 4
echo ""

cd $prefix || exit 5

# Generate configure script so autoconf is not required to install.
./buildconf --force

# Generate lexer and parser files so bison and re2c aren't required to install.
./scripts/dev/genfiles
exit_code=$?
if test "$exit_code" != "0"; then
  exit $exit_code
fi

# Remove not needed files.
rm -rf autom4te.cache/

# Download pear.
echo ""
echo "makedist: Attempting to download PEAR's phar archive"
if test ! -x wget; then
  wget https://pear.php.net/install-pear-nozlib.phar -nd -P pear/
  if [ "x$?" != "x0" ]; then
    echo "makedist: Pear download failed" >&2
    exit 1
  fi
else
  echo "makedist: Missing wget binary needed for pear download" >&2
  exit 1
fi

# Touch everything to be packaged.
echo "makedist: Touching all files..."
find . -exec touch -c {} \;

cd ..

echo "makedist: Creating tar archive"
tar cf "$prefix".tar "$prefix"
rm -rf "$prefix" "$prefix".tar.*

echo "makedist: Creating tar.gz archive"
gzip -9 -k "$prefix".tar || exit 6
md5sum "$prefix".tar.gz
gzip -t "$prefix".tar.gz

sync
sleep 2

echo "makedist: Creating tar.bz2 archive"
bzip2 -9 -k $prefix.tar || exit 7
md5sum $prefix.tar.bz2
bzip2 -t $prefix.tar.bz2

sync
sleep 2

echo "makedist: Creating tar.xz archive"
xz -9 -k "$prefix".tar || exit 9
md5sum "$prefix".tar.xz
xz -t "$prefix".tar.xz

echo "makedist: cleaning up."
rm -f "$prefix".tar || exit 13
echo ""
echo "makedist: All done."
