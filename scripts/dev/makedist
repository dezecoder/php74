#!/bin/sh
#
# PHP distribution generator for creating PHP release packages.
#
# Written by Stig Bakken <ssb@guardian.no> 1997-05-28.
# Adapted to git by Stanislav Malyshev <stas@php.net>
#
# TODO:
# - Fix remote repo option
# - Check if Zend parsers need fixes
#
# tweak zendparse to be exported through ZEND_API
# NOTE this has to be revisited once bison supports foreign skeletons
#      and that bison version is used. Read /usr/share/bison/README for more
#sed -i 's,^int zendparse\(.*\),ZEND_API int zendparse\1,g' $MY_OLDPWD/php-$VER/Zend/zend_language_parser.c
#sed -i 's,^int zendparse\(.*\),ZEND_API int zendparse\1,g' $MY_OLDPWD/php-$VER/Zend/zend_language_parser.h
#sed -i 's,^#ifndef YYTOKENTYPE,#include "zend.h"\n#ifndef YYTOKENTYPE,g' $MY_OLDPWD/php-$VER/Zend/zend_language_parser.h

# Go to project root directory.
cd $(CDPATH= cd -- "$(dirname -- "$0")/../../" && pwd -P)

# Process options and arguments
while test $# -gt 0; do
  if test "$1" = "-h" || test "$1" = "--help"; then
    cat << HELP
PHP distribution generator for creating PHP release packages.

Creates a PHP release package (tar.gz, tar.bz2, tar.xz) from the current Git
php-src repository files.

Beside the source code files present in the Git repository, the snapshot archive
also includes generated configure script, configuration headers, PHP parsers,
PHP lexers, and similar generated files to simplify the installation on *nix
systems.

This script needs a consistent tagging of all releases. Each release of a
package should have a tag of the form:

  php-X.Y.Z[alpha|beta|RC]

Where:
- X is major version number
- Y is minor version number
- Z is patch version number
- last part is optional and can be one of RC, alpha, beta and belonging number.

SYNOPSIS:
  makedist [option] <tree-ish>

OPTIONS:
  -h, --help       Display this help.
  --remote <repo>  Instead of using a local repository, retrieve a tar archive
                   from a remote repository.
  <tree-ish>       The Git tree or Git commit to produce an archive for.

EXAMPLES:

  Creates nightly snapshot of the master branch:
    makedist

  Creates release packages:
    makedist php-7.4.0

  Creates a release candidate 1 packages:
    makedist php-7.4.0RC1

  Creates release packages from a remote Git repository:
    makedist --remote git@git.php.net:php-src.git php-7.4.0RC1
HELP
    exit 0
  elif test "$1" = "--remote" && test -n "$2"; then
    remote=$2
    shift
    shift
  elif test -n "$1"; then
    treeish="$1"
    prefix="$treeish"
    shift
  fi
done

if test -z "$treeish"; then
  treeish="master"
  prefix="php-snapshot-master-"$(date +"%Y-%m-%d-%H-%M")
fi

if test -d "$prefix"; then
  echo "The directory $prefix" >&2
  echo "already exists, rename or remove it and run makedist again." >&2
  exit 1
fi

if test -n "$remote"; then
  remote="--remote=$remote"
else
  echo "makedist: Verifying that tree-ish $treeish exists in Git repository..."
  git rev-parse --verify $treeish
  exit_code=$?
  if test "$exit_code" != "0"; then
    echo "          $treeish is not found in the Git repository" >&2
    exit $exit_code
  else
    echo "          OK"
  fi
fi

# Export PHP.
echo "makedist: exporting '$treeish' from '$git'..."
git archive --format=tar $remote --prefix=$prefix/ $treeish | tar xvf - || exit 4
echo ""

cd $prefix || exit 5

# Generate configure script so autoconf is not required to install.
./buildconf --force

# Generate lexer and parser files so bison and re2c aren't required to install.
./scripts/dev/genfiles
exit_code=$?
if test "$exit_code" != "0"; then
  exit $exit_code
fi

# Remove not needed files.
rm -rf autom4te.cache/

# Download pear
echo ""
echo "makedist: Attempting to download PEAR's phar archive"
if test ! -x wget; then
  wget https://pear.php.net/install-pear-nozlib.phar -nd -P pear/
  if [ "x$?" != "x0" ]; then
    echo "makedist: Pear download failed" >&2
    exit 1
  fi
else
  echo "makedist: Missing wget binary needed for pear download" >&2
  exit 1
fi

# Touch everything to be packaged.
echo "makedist: Touching all files..."
find . -exec touch -c {} \;

cd ..

echo "makedist: Creating tar archive"
tar cf "$prefix".tar "$prefix"
rm -rf "$prefix" "$prefix".tar.*

echo "makedist: Creating tar.gz archive"
gzip -9 -k "$prefix".tar || exit 6
md5sum "$prefix".tar.gz
gzip -t "$prefix".tar.gz

sync
sleep 2

echo "makedist: Creating tar.bz2 archive"
bzip2 -9 -k $prefix.tar || exit 7
md5sum $prefix.tar.bz2
bzip2 -t $prefix.tar.bz2

sync
sleep 2

echo "makedist: Creating tar.xz archive"
xz -9 -k "$prefix".tar || exit 9
md5sum "$prefix".tar.xz
xz -t "$prefix".tar.xz

echo "makedist: cleaning up."
rm -f "$prefix".tar || exit 13
echo ""
echo "makedist: All done."
